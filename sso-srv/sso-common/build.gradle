project.ext {
    resourceDir = "${project(':sso-flow').projectDir}" + File.separator +
            "src" + File.separator +
            "main" + File.separator +
            "resources"
}

sourceSets {
    generated {
        java {
            ['src/generated/java/']
        }
    }
}

dependencies {
    compile(
    // database
            libraries.postgresql,
            libraries.jdbc,
    // Hibernate
//            libraries.hibernate_jpa,
//            libraries.hibernate_validator,
            // for JPA, use hibernate-entitymanager instead of hibernate-core
            libraries.hibernate_entitymanager,
//            libraries.hibernate_ehcache,
            libraries.hibernate_tools,
    // Spring
            libraries.spring_core,
            libraries.spring_beans,
            libraries.spring_context,
            libraries.spring_security_config,
            libraries.spring_jdbc,
            libraries.spring_web,
            libraries.spring_webmvc,
            libraries.spring_jms,
            libraries.spring_data_jpa,
    // JSON
            libraries.jackson_core,
            libraries.jackson_databind,
            libraries.jackson_annotations,
            libraries.code_gson,
    // jtidy
            libraries.jtidy,
    // Annotation
            libraries.validation,
            libraries.hibernate_jpa,
            libraries.hibernate_validator,
    // Activemq
            libraries.activemq_client,
            libraries.activemq_pool,
    // Guava
            libraries.guava,
    // Fileupload
            libraries.commons_fileupload,
    // JodaTime
            libraries.joda_time,
    // Dto Mapper
            libraries.orika_core
    )
    // Commons
    compile(libraries.http_client) {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    compile(
            libraries.commons_config,
            libraries.commons_httpclient,
            libraries.commons_lang,
            libraries.cors_filter
    )
}


task hbm2java {
// set table sequence for id generator
    def Map<String> map = new HashMap<String>();
    map.put("position", "position_seq");
    map.put("user", "user_seq");
    map.put("role", "role_seq");
    map.put("user_role", "user_role_seq");
    map.put("org_unit", "org_unit_seq");
    map.put("position", "position_seq");

    def destDir = sourceSets.generated.java.srcDirs.iterator().next()
// for cache output use:
// outputs.dir destDir
    def props = loadProperties()
    doLast {
        logger.quiet('>>delete old generated')
        delete sourceSets.generated.java.srcDirs
        logger.quiet('>>create new generated')
        mkdir(destDir)

        def File hibernatePropertiesFile = new File(destDir, "hibernate.properties")
        hibernatePropertiesFile.append(
"""hibernate.dialect = ${props['db.sso.flow.dialect']}
hibernate.connection.driver_class = ${props['db.sso.flow.driver']}
hibernate.connection.url = ${props['db.sso.flow.jdbc.url']}
hibernate.connection.username = ${props['db.sso.flow.user']}
hibernate.connection.password = ${props['db.sso.flow.password']}
        """)

        def File hibernateRevengFile = new File(destDir, "hibernate.reveng.xml")
        hibernateRevengFile.append(
"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-reverse-engineering
    SYSTEM "http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd">
<hibernate-reverse-engineering>
    <type-mapping>
        <sql-type jdbc-type="NUMERIC"  precision='1' hibernate-type="Boolean" />
        <sql-type jdbc-type="INTEGER"  hibernate-type="Integer" />
        <sql-type jdbc-type="BIGINT"  hibernate-type="Long" />
    </type-mapping>
    <table-filter match-name="databasechangelog.*" exclude="true" />""")
        for(Map.Entry entry : map.entrySet()) {
            hibernateRevengFile.append("""
    <table schema="public" name="${entry.key}">
        <primary-key>
            <generator class="sequence">
                <param name="sequence">${entry.value}</param>
            </generator>
        </primary-key>
    </table>""")
        }
        hibernateRevengFile.append("""
</hibernate-reverse-engineering>""")

        ant {
            echo(message: '>> ant: hbm2java')

            taskdef(name: 'hibernatetool',
                    classname: 'org.hibernate.tool.ant.HibernateToolTask',
                    classpath: configurations.compile.asPath)
            hibernatetool (templatepath: resourceDir + File.separator + "templates") {
                jdbcconfiguration(
                        packagename: "${props['db.sso.flow.packages.scan']}",
                        revengfile: "${hibernateRevengFile.absolutePath}",
                        // reversestrategy: "ReverseEngineeringStrategy classname",
                        // configurationfile: "D:\\myprojects\\serenity\\sso-srv\\sso-common\\build\\generated\\src\\resources\\hibernate.cfg.xml",
                        propertyfile: "${hibernatePropertiesFile.absolutePath}"
                        // detectmanytomany: "true",
                        // detectoptmisticlock: "true"
                )
                hbm2java(
                        destdir: "${destDir}",
                        jdk5: 'true',
                        ejb3: 'true'
                )
                classpath {
                    pathelement(path: "${destDir}")
                }
            }

            echo(message: '<< ant: hbm2java')
        }
    }
}


compileJava {
    source sourceSets.generated.java.srcDirs
}

def Properties loadProperties() {
    def sourceFileName = "sso-flow-dynamic.properties"
    def config = new Properties()
    def propFile = new File(resourceDir + File.separator + sourceFileName)
    config.load(new FileInputStream(propFile))

    propFile =
            new File(System.properties['user.home'] + File.separator +
                    "sso" + File.separator +
                    sourceFileName)
    if(propFile.canRead()){
        config.load(new FileInputStream(propFile))
    }

    config
}


configurations {
    liquibase
}

dependencies {
    liquibase libraries.postgresql
    liquibase libraries.liquibase_core
}

task dropAll(type: JavaExec) {
    def props = loadProperties()
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"

    args "--changeLogFile=../sso-db/sso-flow/migrations/db_sso-flow.changelog.xml"
    args "--username=" + props['db.sso.flow.user']
    args "--password=" + props['db.sso.flow.password']
    args "--url=" + props['db.sso.flow.jdbc.url']
    args "--driver=" + props['db.sso.flow.driver']
    args "dropAll"
}

task rollbackCount(type: JavaExec) {
    def props = loadProperties()
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"
    args "--changeLogFile=../sso-db/sso-flow/migrations/db_sso-flow.changelog.xml"
    args "--username=" + props['db.sso.flow.user']
    args "--password=" + props['db.sso.flow.password']
    args "--url=" + props['db.sso.flow.jdbc.url']
    args "--driver=" + props['db.sso.flow.driver']
    args "rollbackCount"
    args "1"
}

task update(type: JavaExec) {
    def props = loadProperties()
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"

    // java -jar ./lib/liquibase.jar --defaultsFile=sso-flow/liquibase-sso-flow.properties --classpath=./lib/postgresql-9.1-901.jdbc4.jar update
//    args "--changeLogFile=../sso-db/sso-flow/migrations/db_sso-flow.changelog.xml"
//    args "--username=postgres"
//    args "--password=Password1"
//    args "--url=jdbc:postgresql://localhost/sso-flow?charSet=UTF8"
//    args "--driver=org.postgresql.Driver"
    args "--changeLogFile=../sso-db/sso-flow/migrations/db_sso-flow.changelog.xml"
    args "--username=" + props['db.sso.flow.user']
    args "--password=" + props['db.sso.flow.password']
    args "--url=" + props['db.sso.flow.jdbc.url']
    args "--driver=" + props['db.sso.flow.driver']
    args "update"
}

task updateDemo(type: JavaExec) {
    workingDir = new File("/home/teamcity/sso/build/srv/demo/current/workcopy/sso-common")

    def props = loadProperties()
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"

    args "--changeLogFile=../sso-db/sso-flow/migrations/db_sso-flow.changelog.xml"
    args "--username=" + props['db.sso.flow.user']
    args "--password=" + props['db.sso.flow.demo.password']
    args "--url=" + props['db.sso.flow.demo.jdbc.url']
    args "--driver=" + props['db.sso.flow.driver']
    args "update"
}

task updateProd(type: JavaExec) {
    workingDir = new File("/home/teamcity/sso/build/srv/prod/current/workcopy/sso-common")

    def props = loadProperties()
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"

    args "--changeLogFile=../sso-db/sso-flow/migrations/db_sso-flow.changelog.xml"
    args "--username=" + props['db.sso.flow.user']
    args "--password=" + props['db.sso.flow.prod.password']
    args "--url=" + props['db.sso.flow.prod.jdbc.url']
    args "--driver=" + props['db.sso.flow.driver']
    args "update"
}